// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum PaymentStatus {
  NOT_PAID
  PENDING
  PAID
  CANCELLED
}


model Bill {
  id String @id @default(cuid())
  
  totalKwh Int
  totalPrice Int
  status PaymentStatus @default(NOT_PAID)


  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageId String
  usage Usage @relation(fields: [usageId], references: [id], onDelete: Cascade)

  payment Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id String @id @default(cuid())

  bankName String
  accountNumber String
  accountName String
  // expires DateTime

  userId String
  user User @relation(fields: [userId], references: [id])

  billId String
  bill Bill @relation(fields: [billId],references: [id])
}


model Usage {
  id String @id @default(cuid())
  isActive Boolean @default(false)
  initialKwh Int @default(0)
  finalKwh Int?

  startDate DateTime @default(now())
  endDate DateTime @default(dbgenerated("(NOW() + '30 days'::interval)"))

  bill Bill[]
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}


model CostVariant {
  id String @id @default(cuid())
  code String @unique
  power String
  costPerKwh Int

  user User[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id  String  @id @default(cuid())
  name  String
  email  String  @unique
  emailVerified DateTime?  @default(now())
  phoneNumber String? @unique
  password String?
  image  String?
  role Role @default(USER)
  address String?
  accounts  Account[]

  costVariantId String? 
  costVariant CostVariant? @relation(fields: [costVariantId], references: [id] ) 
  usage Usage[]
  payment Payment[]
  bill Bill[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}


model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

